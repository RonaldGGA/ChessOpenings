// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma/client.js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favorites     UserFavorite[]
  progress      UserProgress[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Opening {
  id          String    @id @default(cuid())
  eco         String    @unique
  name        String
  moves       String[]
  description String?
  whiteWins   Int       @default(0)
  blackWins   Int       @default(0)
  draws       Int       @default(0)
  totalGames  Int       @default(0)
  popularity  Float     @default(0)
  initialFen  String?
  variations  Variation[]
  moveStatistics MoveStatistic[]
  userFavorites UserFavorite[]
  userProgress UserProgress[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Variation {
  id        String   @id @default(cuid())
  name      String
  moves     String[]
  opening   Opening @relation(fields: [openingId], references: [id])
  openingId String
  createdAt DateTime @default(now())
}

model MoveStatistic {
  id        String  @id @default(cuid())
  move      String
  wins      Int     @default(0)
  losses    Int     @default(0)
  draws     Int     @default(0)
  total     Int     @default(0)
  opening   Opening @relation(fields: [openingId], references: [id])
  openingId String
}

model UserFavorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  opening   Opening  @relation(fields: [openingId], references: [id])
  openingId String
  createdAt DateTime @default(now())

  @@unique([userId, openingId])
}

model UserProgress {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  opening        Opening  @relation(fields: [openingId], references: [id])
  openingId      String
  correctMoves   Int      @default(0)
  totalMoves     Int      @default(0)
  bestScore      Int      @default(0)
  timesPracticed Int      @default(0)
  lastPracticed  DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, openingId])
}